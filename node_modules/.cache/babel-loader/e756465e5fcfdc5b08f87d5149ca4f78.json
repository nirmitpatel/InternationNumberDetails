{"ast":null,"code":"var _jsxFileName = \"/Users/npatel-mbp/Desktop/IntNumLookup/react-api/src/components/phoneDetails.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport data from \"../BandwidthHighRiskBlock.csv\"; // d3.csv(data).then(function(data) {\n//     console.log(data)\n// }).catch(function(err) {\n//     throw err;\n// })\n// Parse file \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst handleFileUpload = e => {\n  const reader = new FileReader();\n\n  reader.onload = evt => {\n    // Parse Data\n    const bstr = evt.target.result;\n    const wb = XLSX.read(bstr, {\n      type: 'binary'\n    });\n    /* Get first worksheet */\n\n    const wsname = wb.SheetNames[0];\n    const ws = wb.Sheets[wsname];\n    /* Convert array of arrays */\n\n    const info = XLSX.utils.sheet_to_csv(ws, {\n      header: 1\n    });\n    processData(info);\n  };\n\n  reader.readAsBinaryString(data);\n};\n\nconst processData = dataString => {\n  const dataStringLines = dataString.split(/\\r\\n|\\n/);\n  const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n  const list = [];\n\n  for (let i = 1; i < dataStringLines.length; i++) {\n    const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n    if (headers && row.length == headers.length) {\n      const obj = {};\n\n      for (let j = 0; j < headers.length; j++) {\n        let d = row[j];\n\n        if (d.length > 0) {\n          if (d[0] == '\"') d = d.substring(1, d.length - 1);\n          if (d[d.length - 1] == '\"') d = d.substring(d.length - 2, 1);\n        }\n\n        if (headers[j]) {\n          obj[headers[j]] = d;\n        }\n      } // remove the blank rows\n\n\n      if (Object.values(obj).filter(x => x).length > 0) {\n        list.push(obj);\n      }\n    }\n  } // prepare columns list from headers\n\n\n  const columns = headers.map(c => ({\n    name: c,\n    selector: c\n  }));\n  setData(list);\n  setColumns(columns);\n};\n\nconst PhoneDetails = ({\n  phoneDetails\n}) => {\n  return (\n    /*#__PURE__*/\n    // <input type=\"text\" className=\"form-control\" ref={(c) => this.PhoneDetails = c} name=\"title\" />\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Number Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), phoneDetails.map(phoneDetail => /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"card-text\",\n            children: [\"Number: \", phoneDetail.number]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"card-text\",\n            children: [\"Local format: \", phoneDetail.local_format]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"card-text\",\n            children: [\"International format: \", phoneDetail.international_format]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"card-text\",\n            children: [\"Country prefix: \", phoneDetail.country_prefix]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"card-text\",\n            children: [\"Country code: \", phoneDetail.country_code]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"card-text\",\n            children: [\"Country name: \", phoneDetail.country_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"card-text\",\n            children: [\"Location: \", phoneDetail.location]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"card-text\",\n            children: [\"Carrier: \", phoneDetail.carrier]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"card-text\",\n            children: [\"Line type: \", phoneDetail.line_type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this))]\n    }, \"index\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) // <pre>\n    //     {JSON.stringify(phoneDetails, null, 2)}\n    // </pre>\n\n  );\n};\n\n_c = PhoneDetails;\nexport default PhoneDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhoneDetails\");","map":{"version":3,"sources":["/Users/npatel-mbp/Desktop/IntNumLookup/react-api/src/components/phoneDetails.js"],"names":["React","d3","data","handleFileUpload","e","reader","FileReader","onload","evt","bstr","target","result","wb","XLSX","read","type","wsname","SheetNames","ws","Sheets","info","utils","sheet_to_csv","header","processData","readAsBinaryString","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","columns","map","c","name","selector","setData","setColumns","PhoneDetails","phoneDetails","phoneDetail","number","local_format","international_format","country_prefix","country_code","country_name","location","carrier","line_type"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as d3 from 'd3';\nimport data from \"../BandwidthHighRiskBlock.csv\"\n\n// d3.csv(data).then(function(data) {\n//     console.log(data)\n// }).catch(function(err) {\n//     throw err;\n// })\n\n// Parse file \nconst handleFileUpload = e => {\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n        // Parse Data\n        const bstr = evt.target.result;\n        const wb = XLSX.read(bstr, { type: 'binary' });\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n        const info = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n        processData(info);\n    };\n    reader.readAsBinaryString(data);\n}\n\nconst processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n        const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n        if (headers && row.length == headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n            let d = row[j];\n            if (d.length > 0) {\n            if (d[0] == '\"')\n                d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"')\n                d = d.substring(d.length - 2, 1);\n            }\n            if (headers[j]) {\n            obj[headers[j]] = d;\n            }\n        }\n\n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n            list.push(obj);\n        }\n    }\n}\n\n// prepare columns list from headers\nconst columns = headers.map(c => ({\n    name: c,\n    selector: c,\n}));\n\nsetData(list);\nsetColumns(columns);\n}\n\nconst PhoneDetails = ({ phoneDetails }) => {\n    return (\n        // <input type=\"text\" className=\"form-control\" ref={(c) => this.PhoneDetails = c} name=\"title\" />\n        <div key=\"index\">\n            <center><h1>Number Info</h1></center>\n            {phoneDetails.map((phoneDetail) => (\n            <div class=\"card\">\n                <div class=\"card-body\">\n                <p class=\"card-text\">Number: {phoneDetail.number}</p>\n                <p class=\"card-text\">Local format: {phoneDetail.local_format}</p>\n                <p class=\"card-text\">International format: {phoneDetail.international_format}</p>\n                <p class=\"card-text\">Country prefix: {phoneDetail.country_prefix}</p>\n                <p class=\"card-text\">Country code: {phoneDetail.country_code}</p>\n                <p class=\"card-text\">Country name: {phoneDetail.country_name}</p>\n                <p class=\"card-text\">Location: {phoneDetail.location}</p>\n                <p class=\"card-text\">Carrier: {phoneDetail.carrier}</p>\n                <p class=\"card-text\">Line type: {phoneDetail.line_type}</p>\n                </div>\n            </div>\n            ))}\n        </div>\n\n    \n    // <pre>\n    //     {JSON.stringify(phoneDetails, null, 2)}\n    // </pre>\n    )\n};\n\nexport default PhoneDetails"]},"metadata":{},"sourceType":"module"}