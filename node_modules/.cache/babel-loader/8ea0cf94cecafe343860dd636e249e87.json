{"ast":null,"code":"var _jsxFileName = \"/Users/npatel-mbp/Desktop/IntNumLookup/react-api/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals'; //import LoadingIndicator from './loader';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from 'react-loader-spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoadingIndicator = () => {\n  _s();\n\n  //const [promiseInProgress, setLocalPhone] = useState(usePromiseTracker())\n  const {\n    promiseInProgress\n  } = usePromiseTracker();\n  return promiseInProgress &&\n  /*#__PURE__*/\n  // <h1>Hey some async call in progress ! </h1>;\n  _jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Loader, {\n      type: \"ThreeDots\",\n      color: \"#2BAD60\",\n      height: \"100\",\n      width: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoadingIndicator, \"KTo1xiutw/iZHt+hlD1avyNKva4=\", false, function () {\n  return [usePromiseTracker];\n});\n\n_c = LoadingIndicator;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: [/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 30,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadingIndicator\");","map":{"version":3,"sources":["/Users/npatel-mbp/Desktop/IntNumLookup/react-api/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","usePromiseTracker","Loader","LoadingIndicator","promiseInProgress","width","height","display","justifyContent","alignItems","render","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CACA;;AACA,OAAO,sCAAP;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBH,iBAAiB,EAA/C;AACA,SAAOG,iBAAiB;AAAA;AACtB;AACA;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,MADF;AAELC,MAAAA,MAAM,EAAE,KAFH;AAGLC,MAAAA,OAAO,EAAE,MAHJ;AAILC,MAAAA,cAAc,EAAE,QAJX;AAKLC,MAAAA,UAAU,EAAE;AALP,KADT;AAAA,2BASE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,WAAb;AAAyB,MAAA,KAAK,EAAC,SAA/B;AAAyC,MAAA,MAAM,EAAC,KAAhD;AAAsD,MAAA,KAAK,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,UAFF;AAaD,CAhBD;;GAAMN,gB;UAE0BF,iB;;;KAF1BE,gB;AAkBNL,QAAQ,CAACY,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,0BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,UADF,eAEE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,UAFF;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CALF,E,CAQA;AACA;AACA;;AACAZ,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//import LoadingIndicator from './loader';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from 'react-loader-spinner';\n\nconst LoadingIndicator = () => {\n  //const [promiseInProgress, setLocalPhone] = useState(usePromiseTracker())\n  const { promiseInProgress } = usePromiseTracker();\n  return promiseInProgress && \n    // <h1>Hey some async call in progress ! </h1>;\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\n    </div>\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <LoadingIndicator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}