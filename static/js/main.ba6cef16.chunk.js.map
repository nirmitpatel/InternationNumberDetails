{"version":3,"sources":["components/ProcessCsv.js","components/ProcessLiteCsv.js","components/ReturnDetails.js","components/ReturnLocalDetails.js","BandwidthHighRiskBlock.csv","lite.csv","background-globe-animated.svg","App.js","reportWebVitals.js","index.js"],"names":["ProcessCsv","props","console","log","details","dta","high","d","includes","Prefix","ProcessLiteCsv","number","csvFile","Country","ReturnDetails","csv","intlPhoneDetails","liteCsv","rootStyle","background","color","overflow","width","fontFamily","textAlign","alignItems","map","intlPhoneDetail","className","style","local_format","international_format","country_prefix","country_code","country_name","location","carrier","line_type","toString","localPhoneDetails","localPhoneDetail","result","Formatted","App","useState","localPhone","setLocalPhone","setLocalPhoneDetails","highRiskData","setHighRiskData","liteData","setLiteData","intlPhone","setIntlPhone","setIntlPhoneDetails","useEffect","d3","data","then","lite","liteDta","toggleIntlButtonState","e","a","preventDefault","fetch","response","json","toggleLocalButtonState","backgroundImage","height","backgroundSize","backgroundRepeat","backgroundPosition","split","minSize","defaultSize","value","onChange","target","handleLocalInput","onClick","ReturnLocalDetails","handleIntlInput","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba6cef16.chunk.js","sourcesContent":["import React from 'react';\r\nfunction ProcessCsv(props) {\r\n  console.log('process')\r\n\r\n  const { details, dta } = props\r\n  let high = false\r\n\r\n  for (let d of dta) {\r\n    if (details.includes(\"+\" + d.Prefix)) {\r\n      high = true\r\n      break;\r\n    }\r\n    else {\r\n      // do nothing \r\n    }\r\n  }\r\n\r\n  if (high) { return <p>High Risk: Yes</p>; }\r\n\r\n  else { return <p>High Risk: No</p>; }\r\n\r\n}\r\n\r\nexport default ProcessCsv","import React from 'react';\r\n\r\nfunction ProcessLiteCsv(props) {\r\n  console.log('ProcessLiteCsv')\r\n\r\n  const { number, csvFile } = props\r\n  let high = false\r\n\r\n  for (let d of csvFile) {\r\n    if (number.includes(\"+\" + d.Prefix)) {\r\n      console.log('ProcessLiteCsv if: ' + d.Prefix + \" Country: \" + d.Country)\r\n      high = true\r\n      break;\r\n    }\r\n    else {\r\n      // do nothing\r\n    }\r\n  }\r\n\r\n  if (high) { return <p>INTL Lite Blocked: Yes</p>; }\r\n\r\n  else { return <p>INTL Lite Blocked: No</p>; }\r\n\r\n}\r\n\r\nexport default ProcessLiteCsv","import React from 'react';\nimport ProcessCsv from './ProcessCsv';\nimport ProcessLiteCsv from './ProcessLiteCsv';\n\n\nfunction ReturnDetails(props) {\n\n    const { csv, intlPhoneDetails, liteCsv } = props\n    var rootStyle = {\n        background: \"rgba(255, 255, 242, .9)\",\n        color: '#AC3B61',\n        overflow: 'hidden',\n        width: '400px',\n        fontFamily: 'Overpass,sans-serif',\n        textAlign: 'left',\n        alignItems: 'left'\n    }\n\n    return (\n        <div key=\"index\">\n\n            {intlPhoneDetails ? intlPhoneDetails.map((intlPhoneDetail) => (\n\n                <div className=\"card\" key=\"index2\" style={rootStyle}>\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Number: {intlPhoneDetail.number}</p>\n                        <p className=\"card-text\">Local format: {intlPhoneDetail.local_format}</p>\n                        <p className=\"card-text\">International format: {intlPhoneDetail.international_format}</p>\n                        <p className=\"card-text\">Country prefix: {intlPhoneDetail.country_prefix}</p>\n                        <p className=\"card-text\">Country code: {intlPhoneDetail.country_code}</p>\n                        <p className=\"card-text\">Country name: {intlPhoneDetail.country_name}</p>\n                        <p className=\"card-text\">Location: {intlPhoneDetail.location}</p>\n                        <p className=\"card-text\">Carrier: {intlPhoneDetail.carrier}</p>\n                        <p className=\"card-text\">Line type: {intlPhoneDetail.line_type}</p>\n                        <div>\n                            <ProcessCsv details={intlPhoneDetail.international_format.toString()} dta={csv} />\n                        </div>\n                        <div>\n                            <ProcessLiteCsv number={intlPhoneDetail.international_format.toString()} csvFile={liteCsv} />\n                        </div>\n                    </div>\n                </div>\n            )) : console.log('no map')}\n        </div>\n    )\n}\n\n\n\nexport default ReturnDetails","import React from 'react';\n\n\nfunction ReturnDetails(props) {\n\n    const { localPhoneDetails } = props\n    var rootStyle = {\n        background: \"rgba(255, 255, 242, .9)\",\n        color: '#AC3B61',\n        overflow: 'hidden',\n        width: '400px',\n        fontFamily: 'Overpass,sans-serif',\n        textAlign: 'left',\n        alignItems: 'left'\n    }\n\n    return (\n        <div key=\"index\">\n\n            {localPhoneDetails ? localPhoneDetails.map((localPhoneDetail) => (\n                <div className=\"card\" key=\"index2\" style={rootStyle}>\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">E164 Number: {localPhoneDetail.result[0][\"E.164 Format\"]}</p>\n                        <p className=\"card-text\">Formatted Number: {localPhoneDetail.result[0].Formatted}</p>\n                        <p className=\"card-text\">Country name: {localPhoneDetail.result[0].Country}</p>\n                        <p className=\"card-text\">Line type: {localPhoneDetail.result[0][\"Line Type\"]}</p>\n                        <p className=\"card-text\">Carrier: {localPhoneDetail.result[0][\"Line Provider\"]}</p>\n                    </div>\n                </div>\n            )) : console.log('no map')}\n        </div>\n    )\n}\n\n\n\nexport default ReturnDetails","export default __webpack_public_path__ + \"static/media/BandwidthHighRiskBlock.924e58a4.csv\";","export default __webpack_public_path__ + \"static/media/lite.0a44dd3f.csv\";","export default __webpack_public_path__ + \"static/media/background-globe-animated.1300d578.svg\";","\nimport React, { useState, useEffect } from 'react';\nimport ReturnDetails from './components/ReturnDetails';\nimport ReturnLocalDetails from './components/ReturnLocalDetails';\nimport * as d3 from 'd3';\nimport data from \"./BandwidthHighRiskBlock.csv\";\nimport lite from \"./lite.csv\";\nimport background from \"./background-globe-animated.svg\"\nimport \"./App.css\";\nimport SplitPane from 'react-split-pane'\n\nfunction App() {\n\n  const [localPhone, setLocalPhone] = useState('')\n  const [localPhoneDetails, setLocalPhoneDetails] = useState([])\n  const [highRiskData, setHighRiskData] = useState([])\n  const [liteData, setLiteData] = useState([])\n  const [intlPhone, setIntlPhone] = useState('')\n  const [intlPhoneDetails, setIntlPhoneDetails] = useState([])\n\n  useEffect(() => {\n    d3.csv(data).then(function (dta) {\n\n      setHighRiskData(dta)\n\n    })\n  }, [])\n\n  useEffect(() => {\n    d3.csv(lite).then(function (liteDta) {\n\n      setLiteData(liteDta)\n\n    })\n  }, [])\n\n  const handleLocalInput = (e) => {\n    e.preventDefault()\n    setLocalPhone(e.target.value)\n    //console.log(phone)\n  }\n  const handleIntlInput = (e) => {\n    e.preventDefault()\n    setIntlPhone(e.target.value)\n    //console.log(phone)\n  }\n  const toggleIntlButtonState = async (e) => {\n    if (intlPhoneDetails) { setIntlPhoneDetails([]) }\n    e.preventDefault()\n    fetch('http://apilayer.net/api/validate?access_key=1fcc33e69f7fee637d15338c111fe68f&number=' + intlPhone + '&country_code=&format=1')\n      .then(response => response.json())\n      .then((data) => {\n\n        setIntlPhoneDetails(intlPhoneDetails => [...intlPhoneDetails, data])\n        console.log('in the toggle fetch')\n      }\n      )\n  };\n  const toggleLocalButtonState = async (e) => {\n    if (localPhoneDetails) { setLocalPhoneDetails([]) }\n    e.preventDefault()\n    await fetch('https://0xi9lxezba.execute-api.us-east-2.amazonaws.com/test/tnlookup?number=' + localPhone)\n      .then(async response => response.json())\n      .then((data) => {\n        console.log('before data')\n        console.log(data)\n        console.log('in data of toggleIntlButtonState')\n        setLocalPhoneDetails(localPhoneDetails => [...localPhoneDetails, data])\n        console.log('this from app.js: ' + localPhoneDetails)\n      }\n      )\n  };\n  var rootStyle = {\n    backgroundImage: `url(${background})`,\n    color: 'white',\n    height: '100vh',\n    width: '100vw',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    overflow: 'hidden',\n    backgroundPosition: 'center',\n    fontFamily: 'Overpass,sans-serif',\n    textAlign: 'left'\n  }\n\n  return (\n    // <div className={splitScreen}>\n    //   <div style={rootStyle}>\n    //     {/* <center> */}\n    //       <div>\n    //         <h1>Number Info</h1>\n    //         <div className={topPane}>\n    //             <h5>Enter Phone Number: </h5>\n    //             <input className = \"InputBox\" value = {phone} onChange = {(e) => handleInput(e)} /> \n    //             <button className = \"ClickMeButton\" onClick={(e) => toggleButtonState(e)}> View Info! </button>\n    //         </div>\n    //       </div>\n    //       <div>\n    //         <br></br>\n    //       </div>\n    //       <div>\n    //         <ReturnDetails  csv = {highRiskData} phoneDetails = {phoneDetails} liteCsv = {liteData}/> \n    //       </div>\n    //       <div className={bottomPane}>\n    //             <h5>Enter Local Phone Number: </h5>\n    //             <input className = \"InputBox\" value = {phone} onChange = {(e) => handleInput(e)} /> \n    //             <button className = \"ClickMeButton\" onClick={(e) => toggleButtonState(e)}> View Info! </button>\n    //         </div>\n    //     {/* </center> */}\n    //   </div>\n    // </div>,\n\n    <div className='App' style={rootStyle}>\n      <center>\n        <h1>Number Info Tool</h1>\n        <SplitPane split='vertical' minSize='50%' defaultSize='50%'>\n          <div>\n            <h3>Local Number Search</h3>\n            <div>\n              <h5>Enter Local Phone Number: </h5>\n              <input className=\"InputBox\" value={localPhone} onChange={(e) => handleLocalInput(e)} />\n              <button className=\"ClickMeButton\" onClick={(e) => toggleLocalButtonState(e)}> View Info! </button>\n            </div>\n            <div>\n              <br></br>\n            </div>\n            <div>\n              <ReturnLocalDetails localPhoneDetails={localPhoneDetails} />\n            </div>\n          </div>\n          <div>\n            <h3>International Number Search</h3>\n            <div>\n              <h5>Enter International Phone Number: </h5>\n              <input className=\"InputBox\" value={intlPhone} onChange={(e) => handleIntlInput(e)} />\n              <button className=\"ClickMeButton\" onClick={(e) => toggleIntlButtonState(e)}> View Info! </button>\n            </div>\n            <div>\n              <br></br>\n            </div>\n            <div>\n              <ReturnDetails  csv = {highRiskData} intlPhoneDetails = {intlPhoneDetails} liteCsv = {liteData}/> \n            </div>\n          </div>\n        </SplitPane></center>\n    </div>\n\n  );\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}