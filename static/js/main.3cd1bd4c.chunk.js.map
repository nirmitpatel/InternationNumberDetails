{"version":3,"sources":["components/ProcessCsv.js","components/ReturnDetails.js","BandwidthHighRiskBlock.csv","App.js","reportWebVitals.js","index.js"],"names":["ProcessCsv","props","console","log","details","dta","high","d","includes","Prefix","ReturnDetails","csv","phoneDetails","map","phoneDetail","class","number","local_format","international_format","country_prefix","country_code","country_name","location","carrier","line_type","toString","App","useState","phone","setPhone","setPhoneDetails","csvData","setCsvData","useEffect","d3","data","then","toggleButtonState","e","a","preventDefault","fetch","response","json","value","onChange","target","handleInput","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OA4BgBA,MAxBZ,SAAoBC,GACjBC,QAAQC,IAAI,WAEZ,IAHwB,EAGjBC,EAAgBH,EAAhBG,QAASC,EAAOJ,EAAPI,IACZC,GAAO,EAJa,cAMRD,GANQ,IAMtB,2BAAmB,CAAC,IAAXE,EAAU,QAGf,GAAIH,EAAQI,SAAS,IAAMD,EAAEE,QAAS,CACnCH,GAAO,EACP,QAXe,8BAkBvB,OAAGA,EAAgB,6DAEP,gECkBLI,MApCZ,SAAuBT,GAIlB,IAAQU,EAAqBV,EAArBU,IAAKC,EAAgBX,EAAhBW,aAGZ,OACG,gCACI,iCAAQ,+CAENA,EAAeA,EAAaC,KAAI,SAACC,GAAD,OAElC,qBAAKC,MAAM,OAAX,SACI,sBAAKA,MAAM,YAAX,UACA,oBAAGA,MAAM,YAAT,qBAA8BD,EAAYE,UAC1C,oBAAGD,MAAM,YAAT,2BAAoCD,EAAYG,gBAChD,oBAAGF,MAAM,YAAT,mCAA4CD,EAAYI,wBACxD,oBAAGH,MAAM,YAAT,6BAAsCD,EAAYK,kBAClD,oBAAGJ,MAAM,YAAT,2BAAoCD,EAAYM,gBAChD,oBAAGL,MAAM,YAAT,2BAAoCD,EAAYO,gBAChD,oBAAGN,MAAM,YAAT,uBAAgCD,EAAYQ,YAC5C,oBAAGP,MAAM,YAAT,sBAA+BD,EAAYS,WAC3C,oBAAGR,MAAM,YAAT,wBAAiCD,EAAYU,aAE5C,gCAAK,cAAC,EAAD,CAAYpB,QAAWU,EAAYI,qBAAqBO,WAAYpB,IAAOM,IAAhF,eAIAT,QAAQC,IAAI,YArBZ,U,QCdN,MAA0B,mDCuD1BuB,MA/Cf,WAEE,MAAyBC,qBAAzB,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCF,mBAAS,IAAjD,mBAAOf,EAAP,KAAqBkB,EAArB,KACA,EAA8BH,mBAAS,IAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,IAAOC,GAAMC,MAAK,SAAS/B,GAEzB2B,EAAW3B,QAGb,IAEF,IAKIgC,EAAiB,uCAAG,WAAMC,GAAN,SAAAC,EAAA,sDACrB3B,GAAckB,EAAgB,IACjCQ,EAAEE,iBACFC,MAAM,uFAAyFb,EAAQ,2BACtGQ,MAAK,SAAAM,GAAQ,OAAIA,EAASC,UAC1BP,MAAK,SAACD,GAELL,GAAgB,SAAAlB,GAAY,4BAAQA,GAAR,CAAsBuB,OACjDjC,QAAQC,IAAI,0BARS,2CAAH,sDAcrB,OAEE,gCACE,+CAAqB,uBAAOyC,MAAShB,EAAOiB,SAAY,SAACP,GAAD,OAtBxC,SAACA,GACnBA,EAAEE,iBACFX,EAASS,EAAEQ,OAAOF,OAoB+CG,CAAYT,MAC3E,wBAAQU,QAAS,SAACV,GAAD,OAAOD,EAAkBC,IAA1C,wBAEE,cAAC,EAAD,CAAgB3B,IAAOoB,EAASnB,aAAgBA,QCnCzCqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3cd1bd4c.chunk.js","sourcesContent":["import React from 'react';\r\n//import * as d3 from 'd3';\r\n//import data from \"../test.csv\";\r\n   \r\n    function ProcessCsv(props) {\r\n       console.log('process')\r\n\r\n       const {details, dta} = props\r\n       let high = false\r\n     \r\n         for (let d of dta) {\r\n             //console.log(dta)\r\n             //console.log(d)\r\n             if (details.includes(\"+\" + d.Prefix)) {\r\n                high = true\r\n                break;\r\n             }\r\n             else {\r\n               //console.log('csv')\r\n             }\r\n         }\r\n\r\n        if(high) {return   <p>Bandwidth High Risk if: High</p>;    }\r\n\r\n        else{return <p>Bandwidth High Risk else: None</p>;  }\r\n    \r\n        }\r\n\r\n export default ProcessCsv","//import React, {useState, useCallback} from 'react';\nimport React from 'react';\nimport ProcessCsv from './ProcessCsv';\n\n\n\n   function ReturnDetails(props)  {\n\n   \n        \n        const { csv, phoneDetails} = props\n       \n    \n         return (\n            <div key=\"index\">\n                <center><h1>Number Info</h1></center>\n                \n                { phoneDetails ? phoneDetails.map((phoneDetail) => (\n                \n                <div class=\"card\">\n                    <div class=\"card-body\">\n                    <p class=\"card-text\">Number: {phoneDetail.number}</p>\n                    <p class=\"card-text\">Local format: {phoneDetail.local_format}</p>\n                    <p class=\"card-text\">International format: {phoneDetail.international_format}</p>\n                    <p class=\"card-text\">Country prefix: {phoneDetail.country_prefix}</p>\n                    <p class=\"card-text\">Country code: {phoneDetail.country_code}</p>\n                    <p class=\"card-text\">Country name: {phoneDetail.country_name}</p>\n                    <p class=\"card-text\">Location: {phoneDetail.location}</p>\n                    <p class=\"card-text\">Carrier: {phoneDetail.carrier}</p>\n                    <p class=\"card-text\">Line type: {phoneDetail.line_type}</p>\n                    \n                     <div><ProcessCsv details = {phoneDetail.international_format.toString()} dta = {csv} /> </div> \n                   \n                    </div>\n                </div> \n                )) : console.log('no map')}\n        </div>\n                )\n                }\n               \n\n\nexport default ReturnDetails","export default __webpack_public_path__ + \"static/media/BandwidthHighRiskBlock.ebc16346.csv\";","\nimport React, {useState, useEffect} from 'react';\nimport ReturnDetails from './components/ReturnDetails';\n//import useNumberDetails from './components/useNumberDetails';\nimport * as d3 from 'd3';\nimport data from \"./BandwidthHighRiskBlock.csv\";\n\n\nfunction App(){\n\n  const [phone, setPhone]= useState()\n  const [phoneDetails, setPhoneDetails] = useState([])\n  const [csvData, setCsvData] = useState([])\n\n  useEffect(()=> {\n    d3.csv(data).then(function(dta) {\n         \n      setCsvData(dta)\n     \n  })\n  },[])\n  \n  const handleInput = (e) => {\n    e.preventDefault()\n    setPhone(e.target.value)\n    //console.log(phone)\n  }\nconst toggleButtonState = async(e) => {\n  if(phoneDetails){setPhoneDetails([])}\n  e.preventDefault()\n  fetch('http://apilayer.net/api/validate?access_key=1fcc33e69f7fee637d15338c111fe68f&number=' + phone + '&country_code=&format=1')\n  .then(response => response.json())\n  .then((data) => {\n    \n    setPhoneDetails(phoneDetails => [...phoneDetails, data])\n     console.log('in the toggle fetch')\n  }\n  )\n};\n\n\n  return (\n    \n    <div>\n      <p>Phone Number: </p><input value = {phone} onChange = {(e) => handleInput(e)} />\n      <button onClick={(e) => toggleButtonState(e)}> Click me </button>\n      \n        <ReturnDetails  csv = {csvData} phoneDetails = {phoneDetails} /> \n    </div>\n  );\n  \n}\n\n// ReactDOM.render(<App />, document.getElementById('container'));\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}