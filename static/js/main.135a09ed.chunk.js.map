{"version":3,"sources":["components/ProcessCsv.js","components/ProcessLiteCsv.js","components/ReturnDetails.js","BandwidthHighRiskBlock.csv","lite.csv","background-globe-animated.svg","App.js","reportWebVitals.js","index.js"],"names":["ProcessCsv","props","console","log","details","dta","high","d","includes","Prefix","ProcessLiteCsv","number","csvFile","Country","ReturnDetails","csv","phoneDetails","liteCsv","rootStyle","background","color","overflow","width","fontFamily","textAlign","alignItems","map","phoneDetail","className","style","local_format","international_format","country_prefix","country_code","country_name","location","carrier","line_type","toString","App","useState","phone","setPhone","setPhoneDetails","highRiskData","setHighRiskData","liteData","setLiteData","useEffect","d3","data","then","lite","liteDta","toggleButtonState","e","a","preventDefault","fetch","response","json","backgroundImage","height","backgroundSize","backgroundRepeat","backgroundPosition","value","onChange","target","handleInput","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.135a09ed.chunk.js","sourcesContent":["import React from 'react';\r\n//import * as d3 from 'd3';\r\n//import data from \"../test.csv\";\r\n   \r\n    function ProcessCsv(props) {\r\n       console.log('process')\r\n\r\n       const {details, dta} = props\r\n       let high = false\r\n     \r\n         for (let d of dta) {\r\n             //console.log(dta)\r\n             //console.log(d)\r\n             if (details.includes(\"+\" + d.Prefix)) {\r\n                high = true\r\n                break;\r\n             }\r\n             else {\r\n               //console.log('csv')\r\n             }\r\n         }\r\n\r\n        if(high) {return   <p>High Risk: Yes</p>;    }\r\n\r\n        else{return <p>High Risk: No</p>;  }\r\n    \r\n        }\r\n\r\n export default ProcessCsv","import React from 'react';\r\n   \r\n    function ProcessLiteCsv(props) {\r\n       console.log('ProcessLiteCsv')\r\n\r\n       const {number, csvFile} = props\r\n       let high = false\r\n     \r\n         for (let d of csvFile) {\r\n             //console.log(csvFile)\r\n             //console.log(d)\r\n             if (number.includes(\"+\" + d.Prefix)) {\r\n                console.log('ProcessLiteCsv if: ' + d.Prefix + \" Country: \" + d.Country)\r\n                high = true\r\n                break;\r\n             }\r\n             else {\r\n               //console.log('csv')\r\n             }\r\n         }\r\n\r\n        if(high) {return <p>INTL Lite Blocked: Yes</p>; }\r\n\r\n        else{return <p>INTL Lite Blocked: No</p>;  }\r\n    \r\n        }\r\n\r\n export default ProcessLiteCsv","import React from 'react';\nimport ProcessCsv from './ProcessCsv';\nimport ProcessLiteCsv from './ProcessLiteCsv';\n\n\n   function ReturnDetails(props)  {\n\n        const { csv, phoneDetails, liteCsv } = props\n        var rootStyle = {\n            //backgroundImage: `url(${background})`,\n            //background: \"#fffff2\",\n            background: \"rgba(255, 255, 242, .9)\",\n            color : '#AC3B61',\n            //height: '100vh',\n            //backgroundSize: 'cover',\n            overflow: 'hidden',\n            width: '400px',\n            fontFamily: 'Overpass,sans-serif',\n            textAlign: 'left',\n            alignItems: 'left'\n          }\n    \n         return (\n            <div key=\"index\">\n                \n                { phoneDetails ? phoneDetails.map((phoneDetail) => (\n                \n                <div className=\"card\" key=\"index2\" style={rootStyle}>\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Number: {phoneDetail.number}</p>\n                        <p className=\"card-text\">Local format: {phoneDetail.local_format}</p>\n                        <p className=\"card-text\">International format: {phoneDetail.international_format}</p>\n                        <p className=\"card-text\">Country prefix: {phoneDetail.country_prefix}</p>\n                        <p className=\"card-text\">Country code: {phoneDetail.country_code}</p>\n                        <p className=\"card-text\">Country name: {phoneDetail.country_name}</p>\n                        <p className=\"card-text\">Location: {phoneDetail.location}</p>\n                        <p className=\"card-text\">Carrier: {phoneDetail.carrier}</p>\n                        <p className=\"card-text\">Line type: {phoneDetail.line_type}</p>\n                        <div>\n                            <ProcessCsv details = {phoneDetail.international_format.toString()} dta = {csv} /> \n                        </div> \n                        <div>\n                            <ProcessLiteCsv number = {phoneDetail.international_format.toString()} csvFile = {liteCsv} /> \n                        </div> \n                    </div>\n                </div> \n                )) : console.log('no map')}\n        </div>\n                )\n                }\n               \n\n\nexport default ReturnDetails","export default __webpack_public_path__ + \"static/media/BandwidthHighRiskBlock.924e58a4.csv\";","export default __webpack_public_path__ + \"static/media/lite.0a44dd3f.csv\";","export default __webpack_public_path__ + \"static/media/background-globe-animated.1300d578.svg\";","\nimport React, {useState, useEffect} from 'react';\nimport ReturnDetails from './components/ReturnDetails';\n//import useNumberDetails from './components/useNumberDetails';\nimport * as d3 from 'd3';\nimport data from \"./BandwidthHighRiskBlock.csv\";\nimport lite from \"./lite.csv\";\nimport background from \"./background-globe-animated.svg\"\nimport \"./App.css\";\n\nfunction App(){\n  \n  const [phone, setPhone]= useState('')\n  const [phoneDetails, setPhoneDetails] = useState([])\n  const [highRiskData, setHighRiskData] = useState([])\n  const [liteData, setLiteData] = useState([])\n\n  useEffect(()=> {\n    d3.csv(data).then(function(dta) {\n         \n      setHighRiskData(dta)\n     \n  })\n  },[])\n\n  useEffect(()=> {\n    d3.csv(lite).then(function(liteDta) {\n         \n      setLiteData(liteDta)\n     \n  })\n  },[])\n  \n  const handleInput = (e) => {\n    e.preventDefault()\n    setPhone(e.target.value)\n    //console.log(phone)\n  }\nconst toggleButtonState = async(e) => {\n  if(phoneDetails){setPhoneDetails([])}\n  e.preventDefault()\n  fetch('http://apilayer.net/api/validate?access_key=1fcc33e69f7fee637d15338c111fe68f&number=' + phone + '&country_code=&format=1')\n  .then(response => response.json())\n  .then((data) => {\n    \n    setPhoneDetails(phoneDetails => [...phoneDetails, data])\n     console.log('in the toggle fetch')\n  }\n  )\n};\nvar rootStyle = {\n  backgroundImage: `url(${background})`,\n  color : 'white',\n  height: '100vh',\n  width: '100vw',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  overflow: 'hidden',\n  backgroundPosition: 'center',\n  fontFamily: 'Overpass,sans-serif',\n  textAlign: 'left',\n  //alignItems: 'left',\n}\n\n  return (\n    <div style={rootStyle}>\n      <center>\n        <div>\n          <h1>Number Info</h1>\n          <div>\n              <h5>Enter Phone Number: </h5>\n              <input className = \"InputBox\" value = {phone} onChange = {(e) => handleInput(e)} /> \n              <button className = \"ClickMeButton\" onClick={(e) => toggleButtonState(e)}> View Info! </button>\n          </div>\n        </div>\n        <div>\n          <br></br>\n        </div>\n        <div>\n          <ReturnDetails  csv = {highRiskData} phoneDetails = {phoneDetails} liteCsv = {liteData}/> \n        </div>\n      </center>\n    </div>\n  );\n  \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}