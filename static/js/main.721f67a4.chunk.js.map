{"version":3,"sources":["App.js","components/phoneDetails.js","reportWebVitals.js","index.js"],"names":["phoneNumber","PhoneDetails","phoneDetails","map","phoneDetail","class","number","local_format","international_format","country_prefix","country_code","country_name","location","carrier","line_type","App","toggleButtonState","console","log","state","phone","param","url","fetch","fetchAPI","then","response","json","data","arr","setState","handleChange","bind","e","this","target","value","type","onChange","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IAmFIA,E,kFCpDWC,EA7BM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OAEI,cADA,CACA,iBACI,iCAAQ,+CACPA,EAAaC,KAAI,SAACC,GAAD,OAClB,qBAAKC,MAAM,OAAX,SACI,sBAAKA,MAAM,YAAX,UACA,oBAAGA,MAAM,YAAT,qBAA8BD,EAAYE,UAC1C,oBAAGD,MAAM,YAAT,2BAAoCD,EAAYG,gBAChD,oBAAGF,MAAM,YAAT,mCAA4CD,EAAYI,wBACxD,oBAAGH,MAAM,YAAT,6BAAsCD,EAAYK,kBAClD,oBAAGJ,MAAM,YAAT,2BAAoCD,EAAYM,gBAChD,oBAAGL,MAAM,YAAT,2BAAoCD,EAAYO,gBAChD,oBAAGN,MAAM,YAAT,uBAAgCD,EAAYQ,YAC5C,oBAAGP,MAAM,YAAT,sBAA+BD,EAAYS,WAC3C,oBAAGR,MAAM,YAAT,wBAAiCD,EAAYU,uBAb5C,UDsFV,IAoDQC,EApDf,kDACE,aAAe,IAAD,8BACZ,gBAqBFC,kBAAoB,WAClBC,QAAQC,IAAI,gBAAkB,EAAKC,MAAMC,OACzCpB,EAAc,EAAKmB,MAAMC,MACzBH,QAAQC,IAAI,gBAAkBlB,GAhClC,SAAkBqB,GAChB,IAAIC,EAAM,kFAAoFD,EAAQ,0BAEtG,OADAJ,QAAQC,IAAII,GACLC,MAAOD,GA+BZE,CAASxB,GACRyB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACL,IAAMC,EAAM,CAACD,GACZ,EAAKE,SAAS,CAAE5B,aAAc2B,QA7BjC,EAAKV,MAAQ,CACXjB,aAAc,GACdkB,MAAO,MAET,EAAKW,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKhB,kBAAoB,EAAKA,kBAAkBgB,KAAvB,gBAPb,EADhB,gDAmBE,SAAcC,GACZC,KAAKJ,SAAS,CAACV,MAAOa,EAAEE,OAAOC,UApBnC,oBAuCI,WACE,OACE,gCACE,+CAAqB,uBAAOC,KAAK,OAAOC,SAAYJ,KAAKH,eACzD,wBAAQQ,QAASL,KAAKlB,kBAAtB,wBACA,cAAC,EAAD,CAAcd,aAAcgC,KAAKf,MAAMjB,sBA5CjD,GAAyBsC,aE/EVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.721f67a4.chunk.js","sourcesContent":["/*\nimport React, {Component} from 'react';\nimport PhoneDetails from './components/phoneDetails';\n\n\nclass App extends Component {\n  state = {\n    phoneDetails: []\n  }\n  //state = { name: '' };\n\n  componentDidMount() {\n    fetch('http://apilayer.net/api/validate?access_key=799b6b058858fbf11920dbc603e34094&number=919898042011&country_code=&format=1')\n    .then(res => res.json())\n    .then((data) => {\n      const arr = [data];\n       this.setState({ phoneDetails: arr })\n    }\n    )\n    .catch(console.log)\n  }\n\n  render () {\n    return (\n      // <div>\n      //           Enter your name: <input type=\"text\" value=   {this.state.name} onChange={e => this.setState({ name:e.target.value })} />\n      //           <div>Hi {this.state.name}!</div>\n                <PhoneDetails phoneDetails={this.state.phoneDetails} /> \n      //</div>\n    );\n  }\n}\n\nexport default App;\n//-----------------------------------------------------------------------------------------------\n*/\n\n/*\nimport React, {Component} from 'react';\n\nlet phoneNumber;\n\nexport class App extends Component{\n  constructor() {\n    super();\n    this.state = {\n      phone: '',\n      countryPrefix: ''\n    }\n    this.handlechange = this.handlechange.bind(this);\n  }\n\n  handlechange(e) {\n    phoneNumber = this.state.phone;\n    const accessKey = '799b6b058858fbf11920dbc603e34094';\n      fetch('http://apilayer.net/api/validate?access_key=799b6b058858fbf11920dbc603e34094&number=17754127163&country_code=&format=1')\n      .then(response => response.json())\n      // .then(data => this.setState({\n      //   countryPrefix: data['country_prefix']\n      //   }) )\n      .then ((response) => {\n        console.log(response);\n      })\n      //.catch(error => console.log('failed to fetch', error));\n    this.setState({phone: e.target.value});\n  }\n  componentDidMount() {\n  \n  }\n\n  render() {\n    return(\n    <div>\n      <p>Phone Number: </p><input type='text' onChange={this.handlechange}/>\n      <h1> Your phone number is {this.state.phone} and countryPrefix is {this.state.countryPrefix}</h1>\n    </div>);\n  }\n}\n  export default App;\n*/\n\nimport React, {Component} from 'react';\nimport PhoneDetails from './components/phoneDetails';\nlet phoneNumber;\n\nfunction fetchAPI(param) {\n  var url = '//apilayer.net/api/validate?access_key=799b6b058858fbf11920dbc603e34094&number=' + param + '&country_code=&format=1';\n  console.log(url);\n  return fetch (url);\n}\n\nexport class App extends Component{\n  constructor() {\n    super();\n    this.state = {\n      phoneDetails: [],\n      phone: null\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.toggleButtonState = this.toggleButtonState.bind(this);\n  }\n \n  /*\n  handleChange ({target}) {\n    this.setState({\n      [target.name] : target.value\n    });\n  }\n  */\n\n  handleChange (e) {\n    this.setState({phone: e.target.value});\n  }\n\n  toggleButtonState = () => {\n    console.log(\"state phone: \" + this.state.phone);\n    phoneNumber = this.state.phone;\n    console.log(\"phoneNumber: \" + phoneNumber);\n    //let selectedWord = \"17754127163\";\n    fetchAPI(phoneNumber)\n    .then(response => response.json())\n    .then((data) => {\n      const arr = [data];\n       this.setState({ phoneDetails: arr })\n    }\n    )\n    // .then(result => {\n    //   this.setState({ result });\n    // });\n  };\n    render() {\n      return (\n        <div>\n          <p>Phone Number: </p><input type='text' onChange = {this.handleChange}/>\n          <button onClick={this.toggleButtonState}> Click me </button>\n          <PhoneDetails phoneDetails={this.state.phoneDetails} /> \n        </div>\n      );\n    }\n}\n\n// ReactDOM.render(<App />, document.getElementById('container'));\n\nexport default App;","import React from 'react'\n\nconst PhoneDetails = ({ phoneDetails }) => {\n    return (\n        // <input type=\"text\" className=\"form-control\" ref={(c) => this.PhoneDetails = c} name=\"title\" />\n        <div key=\"index\">\n            <center><h1>Number Info</h1></center>\n            {phoneDetails.map((phoneDetail) => (\n            <div class=\"card\">\n                <div class=\"card-body\">\n                <p class=\"card-text\">Number: {phoneDetail.number}</p>\n                <p class=\"card-text\">Local format: {phoneDetail.local_format}</p>\n                <p class=\"card-text\">International format: {phoneDetail.international_format}</p>\n                <p class=\"card-text\">Country prefix: {phoneDetail.country_prefix}</p>\n                <p class=\"card-text\">Country code: {phoneDetail.country_code}</p>\n                <p class=\"card-text\">Country name: {phoneDetail.country_name}</p>\n                <p class=\"card-text\">Location: {phoneDetail.location}</p>\n                <p class=\"card-text\">Carrier: {phoneDetail.carrier}</p>\n                <p class=\"card-text\">Line type: {phoneDetail.line_type}</p>\n                </div>\n            </div>\n            ))}\n        </div>\n\n    \n    // <pre>\n    //     {JSON.stringify(phoneDetails, null, 2)}\n    // </pre>\n    )\n};\n\nexport default PhoneDetails","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}